import pandas as pd
import pickle
from tqdm import tqdm


def build_from_data(df_mmsr):
    """
    input: mmsr_data: filtered on lend and sell
    """
    # create an Numpy array of the unique LEI of the entities from either report agent or counterparties
    leis = pd.unique(df_mmsr[["cntp_lei", "report_agent_lei"]].values.ravel("K"))

    # define the list of dates in the mmsr database
    mmsr_trade_dates = sorted(list(set(df_mmsr.index.strftime("%Y-%m-%d"))))

    # initialisation of a dictionary of the observed paths
    dic_obs_adj_cr = {}  # for the exposures
    dic_obs_adj_tr = {}  # for the transactions (def = expo on generated by the trade)
    for mmsr_trade_date in mmsr_trade_dates:
        dic_obs_adj_cr.update(
            {mmsr_trade_date: pd.DataFrame(columns=leis, index=leis, data=0)}
        )
        dic_obs_adj_tr.update(
            {mmsr_trade_date: pd.DataFrame(columns=leis, index=leis, data=0)}
        )

    # building of the matrices and storage in the dictionary observed_path
    for ts_trade in tqdm(df_mmsr.index):
        if df_mmsr.loc[ts_trade, "first_occurence"]:

            # the transaction is only the amount of the transaction on that day
            dic_obs_adj_tr[ts_trade.strftime("%Y-%m-%d")].loc[
                df_mmsr.loc[ts_trade, "report_agent_lei"],
                df_mmsr.loc[ts_trade, "cntp_lei"],
            ] = df_mmsr.loc[ts_trade, "trns_nominal_amt"]

            # the exposure is added with the existing exposure
            dic_obs_adj_cr[ts_trade.strftime("%Y-%m-%d")].loc[
                df_mmsr.loc[ts_trade, "report_agent_lei"],
                df_mmsr.loc[ts_trade, "cntp_lei"],
            ] = (
                dic_obs_adj_cr[ts_trade.strftime("%Y-%m-%d")].loc[
                    df_mmsr.loc[ts_trade, "report_agent_lei"],
                    df_mmsr.loc[ts_trade, "cntp_lei"],
                ]
                + df_mmsr.loc[ts_trade, "trns_nominal_amt"]
            )

            # loop over the dates up to the maturity of the trade
            for date in pd.period_range(
                start=ts_trade,
                end=min(
                    df_mmsr.loc[ts_trade, "maturity_time_stamp"],
                    pd.to_datetime(mmsr_trade_dates[-1]),
                ),
                freq="1d",
            ).strftime("%Y-%m-%d"):
                dic_obs_adj_cr[date].loc[
                    df_mmsr.loc[ts_trade, "report_agent_lei"],
                    df_mmsr.loc[ts_trade, "cntp_lei"],
                ] = (
                    dic_obs_adj_cr[date].loc[
                        df_mmsr.loc[ts_trade, "report_agent_lei"],
                        df_mmsr.loc[ts_trade, "cntp_lei"],
                    ]
                    + df_mmsr.loc[ts_trade, "trns_nominal_amt"]
                )

        else:  # if it not the first occurence, it means it is an evergreen  (the non evergreen have only lines flagged as first occurences) and only 1 additional maturity date needs to be filled in at the end
            # define the additional date
            date = min(
                df_mmsr.loc[ts_trade, "maturity_time_stamp"],
                pd.to_datetime(mmsr_trade_dates[-1]),
            ).strftime("%Y-%m-%d")
            # add the exposure for this additional date
            dic_obs_adj_cr[date].loc[
                df_mmsr.loc[ts_trade, "report_agent_lei"],
                df_mmsr.loc[ts_trade, "cntp_lei"],
            ] = (
                dic_obs_adj_cr[date].loc[
                    df_mmsr.loc[ts_trade, "report_agent_lei"],
                    df_mmsr.loc[ts_trade, "cntp_lei"],
                ]
                + df_mmsr.loc[ts_trade, "trns_nominal_amt"]
            )

    pickle.dump(
        dic_obs_adj_cr,
        open("./support/dic_obs_adj_cr.pickle", "wb"),
        protocol=pickle.HIGHEST_PROTOCOL,
    )

    pickle.dump(
        dic_obs_adj_tr,
        open("./support/dic_obs_adj_tr.pickle", "wb"),
        protocol=pickle.HIGHEST_PROTOCOL,
    )

    return dic_obs_adj_cr, dic_obs_adj_tr


def get_dic_obs_adj_tr():
    return pickle.load(open("./support/dic_obs_adj_tr.pickle", "rb"))


def get_dic_obs_adj_cr():
    return pickle.load(open("./support/dic_obs_adj_cr.pickle", "rb"))
